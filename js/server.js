// Generated by CoffeeScript 1.9.3
(function() {
  var SseChannel, _, bannerServer, bundle, cfg, channel, dev, fileServer, fs, html, http, lastStatus, loadBundle, log, nodeStatic, sendStatus, srvr, vlc;

  log = require('./utils')('srvr');

  fs = require('fs-plus');

  http = require('http');

  nodeStatic = require('node-static');

  SseChannel = require('sse-channel');

  vlc = require('./vlc');

  _ = require('lodash');

  channel = new SseChannel({
    historySize: 1,
    retryTimeout: 250,
    pingInterval: 5000,
    jsonEncode: true
  });

  lastStatus = null;

  cfg = require("parent-config")("apps-config.json");

  require('./ajax');

  dev = __dirname.indexOf('/dev/') > -1;

  fileServer = new nodeStatic.Server((dev ? {
    cache: 0
  } : void 0));

  bannerServer = new nodeStatic.Server('/archive');

  bundle = null;

  (loadBundle = function() {
    return bundle = fs.readFileSync('js/bundle.js', 'utf8');
  })();

  if (dev) {
    fs.watchFile('js/bundle.js', {
      interval: 100
    }, loadBundle);
  }

  html = fs.readFileSync('client/index.html');

  srvr = http.createServer(function(req, res) {
    var done;
    done = function(err, doc) {
      res.writeHead((err ? 404 : 200), {
        'Content-Type': 'text/json'
      });
      return res.end(JSON.stringify({
        err: err,
        doc: doc
      }));
    };
    switch (req.url) {
      case '/':
        res.writeHead(200, {
          'Content-Type': 'text/html'
        });
        return res.end(html);
      case '/favicon.ico':
        res.writeHead(200, {
          'Content-Type': 'image/vnd.microsoft.icon'
        });
        return res.end(fs.readFileSync('server/images/favicon.ico'));
      case '/channel':
        res.setHeader('Transfer-Encoding', 'identity');
        log('channel.addClient');
        lastStatus = null;
        return channel.addClient(req, res, function(err) {
          lastStatus = null;
          if (err) {
            return log('channel.addClient err:', err.message);
          }
        });
      default:
        return req.addListener('end', function() {
          if (req.url.slice(0, 14) === '/tvdb-banners/') {
            return bannerServer.serve(req, res, function(err) {
              if (err) {
                return done('bannerServer BAD URL: ' + req.url);
              }
            });
          } else {
            return fileServer.serve(req, res, function(err) {
              var ref;
              if (err && ((ref = req.url.slice(-4)) !== '.map' && ref !== '.ico' && ref !== 'ined')) {
                return done('fileServer BAD URL: ' + req.url);
              }
            });
          }
        }).resume();
    }
  });

  (sendStatus = function() {
    return vlc.status(function(err, status) {
      var retry;
      retry = function() {
        lastStatus = null;
        return setTimeout(sendStatus, 500);
      };
      if (err) {
        log('sendStatus err: ', err);
        retry();
        return;
      } else if (status.busy) {
        retry();
        return;
      } else if (!_.isEqual(lastStatus, status)) {
        lastStatus = status;
        channel.send({
          event: 'status',
          id: Date.now(),
          data: status,
          retry: 3000
        });
      }
      return setTimeout(sendStatus, 1000);
    });
  })();

  srvr.listen(cfg.tv_port);

  log('listening on port', cfg.tv_port);

}).call(this);
